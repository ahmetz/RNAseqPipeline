
# April 2012
# Created by Ahmet Zehir


# This script will assume that all the raw data files are in the same folder

# This script will take raw reads in .fastq format (sample_1.fastq and sample_2.fastq) and do the following:
# 		- Align 1million reads using bowtie
#		- Collect information on inner distance and dtdev of insert size
#		- Run TopHat using the above information with the transcriptome index option
#		- Quantify the transcripts using Cufflinks suing a reference annotation file as well as a mask file 
#		- Collect alignment metrics

GENOME_REFERENCE=~/genome_reference/bowtie_indexed/hg19
# This is the reference file that Bowtie will use to perform initial alignments
# *** Need to change this if mRNA, EST and refmRNA will be used instead ***

GENOME_FASTA=~/genome_reference/bowtie_indexed/hg19_fasta
# This fasta file is used for Cuffcompare

GENOME_FA=~/genome_reference/bowtie_indexed/hg19.fa
# Genome file in .fa format for fragment bias correction

BWA_INDEX=~/genome_reference/bowtie_indexed/BWA_indexed
# This is the indexed genome file for BWA

GTF_GUIDE=~/genome_reference/annotation_tracks/GRCh37_E65_TopHatGuiding.gtf
# This is the GTF file that includes all the gene models that are on Chr1-22 and Chr X, Y, MT. Will be used by tophat and cufflink

GTF_FILE=~/genome_reference/annotation_tracks/GRCh37_E65_GenestocalculateRPKMs.gtf
# This will be used for isoform estimations. 
 
MASK_FILE=~/genome_reference/annotation_tracks/GRCh37_E64_1kg_IgMitoRibo_CufflinksExcludeList.gtf
# Used for cufflinks to mask reads coming from rRNA, mtRNA and such

GENOME_NAME=hg19
# This will be used to tag result file to include genome version

QUALITY_ENCODING=--solexa-quals
#Quality encoding of the reads. If the source is from SRA and the .fastq files are generated by simply using the dump-fastq --split-reads then the quality scores are offset by 33

CORES=24
# This is the # of cores programs will use on the computer. Change if different. Mac Pro in the lab can use 24 cores

ALIGNMENT_TYPE=

LIBRARY_FORMAT=fr-unstranded
# The library format depending on the equipment the reads are coming from. fr-unstranded is for Illumina PE reads

COMBINED_READ_LENGTH=100
# Total read length of both read sides

SAMTOOLS_VERSION=0.1.16
# Get version number by typing "samtools"

CUFFLINKS_VERSION=1.0.3
# Get version number by typing "cufflinks"


###################################################################################################
## NOTE: 	Make sure to launch this script from the folder where the raw data is				 ##
##			Make sure all the application to be used are in your home folder and are executable  ##
##																								 ##
##																								 ##		
###################################################################################################

# Current directory /raw_data
# Create a .log file in the current directory

for filesa in 132618_Normal 137815_Tumor 132618_Tumor 6850_Tumor 108595_Normal 108595_Tumor 135575_Tumor 7722_Normal 128546_Tumor 136300_Tumor 7723_Tumor 
do
	SAMPLE_NAME=$filesa
	
	mkdir ${SAMPLE_NAME}
	#mv ${SAMPLE_NAME}_R1.fastq ${SAMPLE_NAME}
	#mv ${SAMPLE_NAME}_R2.fastq ${SAMPLE_NAME}
	
	# The samples will be clipped to a size of 60bp. this is based on the FastQC results obtained for the above listed files
	# Do change this option based on the sample QC you  have
	 fastx_trimmer -Q33 -f 16 -i ${SAMPLE_NAME}_R1.fastq -o ${SAMPLE_NAME}/${SAMPLE_NAME}_R1.fastq
	 fastx_trimmer -Q33 -f 16 -i ${SAMPLE_NAME}_R2.fastq -o ${SAMPLE_NAME}/${SAMPLE_NAME}_R2.fastq
	#fastx_trimmer -Q33 -f 24 -l 73 -i ${SAMPLE_NAME}_R2.fastq -o ${SAMPLE_NAME}/${SAMPLE_NAME}_R2.fastq
	
	mv  ${SAMPLE_NAME}_R1.fastq /Volumes/TimeMachine/sarcoma_patient/${SAMPLE_NAME}/${SAMPLE_NAME}_untrimmed_R1.fastq
	mv  ${SAMPLE_NAME}_R2.fastq /Volumes/TimeMachine/sarcoma_patient/${SAMPLE_NAME}/${SAMPLE_NAME}_untrimmed_R2.fastq
	
	cd ${SAMPLE_NAME}
	# current directory ../${SAMPLE_NAME}
	START_TIME=`date '+%s'`
	echo Starting the analysis for ${SAMPLE_NAME} RNA-seq experiment | tee -a ${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log 
	echo This pipeline will perform the following: | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo 1. Align first one million of the reads to determine the insert size and the standard deviation for it | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo 2. Align the reads using TopHat and the information from the previous step | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo 3. Quantify the aligned reads using Cufflinks | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo 4. Obtain several metrics about the alignment | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ${SAMPLE_NAME}_RNAseq.log
	
	

	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo Counting reads now  | tee -a ${SAMPLE_NAME}_RNAseq.log
	COUNT_READ1=`wc -l ${SAMPLE_NAME}_R1.fastq | awk '{print $1/4}'`  
	COUNT_READ2=`wc -l ${SAMPLE_NAME}_R2.fastq | awk '{print $1/4}'` 
	echo The number of reads in first file  forward reads  is ${COUNT_READ1} | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo The number of reads in second file  reverse reads  is ${COUNT_READ2} | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo Creating the read subsets | tee -a ${SAMPLE_NAME}_RNAseq.log
	head -n 4000000 ${SAMPLE_NAME}_R1.fastq > ${SAMPLE_NAME}_R1_bwt_reads.fastq   | tee -a ${SAMPLE_NAME}_RNAseq.log
	head -n 4000000 ${SAMPLE_NAME}_R2.fastq > ${SAMPLE_NAME}_R2_bwt_reads.fastq   | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo Finished creating subsets for both ends. These files have bwt_reads.fastq suffix to the sample name | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ${SAMPLE_NAME}_RNAseq.log
	

	
	# Run Bowtie Alignment
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo Bowtie will be used to align the first million reads and the output will be converted to .BAM file before metrics calculations | tee -a ${SAMPLE_NAME}_RNAseq.log
	bowtie -q --fr -t -S -X 1000 ${GENOME_REFERENCE} -1 ${SAMPLE_NAME}_R1_bwt_reads.fastq -2 ${SAMPLE_NAME}_R2_bwt_reads.fastq ${SAMPLE_NAME}_subset_bowtie_aligned.sam
	
	# Convert SAM to BAM and get metrics for the insert size
	echo .SAM file will be converted to .BAM and sorted using SAMTOOLS. The insert metrics will be collected from this .BAM file | tee -a ${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	samtools view -bS -o ${SAMPLE_NAME}_subset_bowtie_aligned.bam ${SAMPLE_NAME}_subset_bowtie_aligned.sam | tee -a ${SAMPLE_NAME}_RNAseq.log
	samtools sort ${SAMPLE_NAME}_subset_bowtie_aligned.bam ${SAMPLE_NAME}_subset_bowtie_aligned_sorted   | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo Picarcd Collect Insert Size Metrics is now collecting the necessary information  | tee -a ${SAMPLE_NAME}_RNAseq.log
	java -Xmx2g -jar $HOME/local/bin/CollectInsertSizeMetrics.jar INPUT=${SAMPLE_NAME}_subset_bowtie_aligned_sorted.bam OUTPUT=${SAMPLE_NAME}_Picard_Insert_Metrics.txt HISTOGRAM_FILE=${SAMPLE_NAME}_Picard_Insert_Metrics.pdf VALIDATION_STRINGENCY=SILENT  | tee -a ${SAMPLE_NAME}_RNAseq.log
	INNER_DISTANCE=`head -n 8 ${SAMPLE_NAME}_Picard_Insert_Metrics.txt | tail -n 1 | cut -f5 | awk -v var1="$COMBINED_READ_LENGTH" '{printf "%.0f\n", $1-var1}'`  
	STDEV=`head -n 8 ${SAMPLE_NAME}_Picard_Insert_Metrics.txt | tail -n 1 | cut -f6 | awk '{printf "%.0f\n", $1}'`	
	echo The mean length of insert size is ${INNER_DISTANCE}   | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo The standard deviation of the insert size is ${STDEV}   | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ${SAMPLE_NAME}_RNAseq.log
	
	# Run TopHat with the transcriptome index option
	echo TopHat will now run to align reads to hg19 genome. The reads will align to the transcriptome first, then the reads that failed to align will be aligned to the genome    | tee -a ${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo The software version of TopHat is   | tee -a ${SAMPLE_NAME}_RNAseq.log
	tophat --version
	tophat --version >> ${SAMPLE_NAME}_RNAseq.log
	tophat --num-threads ${CORES} -r ${INNER_DISTANCE} --mate-std-dev ${STDEV} --library-type ${LIBRARY_FORMAT} --output-dir ${SAMPLE_NAME}_tophat -G ${GTF_GUIDE} --transcriptome-index=../knownGenes ${GENOME_REFERENCE} ${SAMPLE_NAME}_R1.fastq ${SAMPLE_NAME}_R2.fastq 2>&1 | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo tophat --num-threads ${CORES} -r ${INNER_DISTANCE} --mate-std-dev ${STDEV} --library-type ${LIBRARY_FORMAT} --output-dir ${SAMPLE_NAME}_tophat -G ${GTF_GUIDE} --transcriptome-index=../knownGenes ${GENOME_REFERENCE} ${SAMPLE_NAME}_R1.fastq ${SAMPLE_NAME}_R2.fastq >> ${SAMPLE_NAME}_RNAseq.log
	echo Finished Tophat alignment   | tee -a ${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ${SAMPLE_NAME}_RNAseq.log
	
	# remove bowtie alignment files
	
	rm -f ${SAMPLE_NAME}_R1_bwt_reads.fastq bowtie_alignment
	rm -f ${SAMPLE_NAME}_R2_bwt_reads.fastq bowtie_alignment
	rm -f ${SAMPLE_NAME}_subset_bowtie_aligned.sam bowtie_alignment
	rm -f ${SAMPLE_NAME}_subset_bowtie_aligned.bam bowtie_alignment
	rm -f ${SAMPLE_NAME}_subset_bowtie_aligned_sorted.bam bowtie_alignment
	rm -f ${SAMPLE_NAME}_Picard_Insert_Metrics.txt bowtie_alignment
	rm -f ${SAMPLE_NAME}_Picard_Insert_Metrics.pdf bowtie_alignment
	
	cd ${SAMPLE_NAME}_tophat
	# Current directory ../../${SAMPLE_NAME}_tophat. Rename the tophat output files
	mv accepted_hits.bam ${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam
	mv deletions.bed ${SAMPLE_NAME}_${GENOME_NAME}_deletions.bed
	mv insertions.bed ${SAMPLE_NAME}_${GENOME_NAME}_insertions.bed
	mv junctions.bed ${SAMPLE_NAME}_${GENOME_NAME}_junctions.bed
	echo Tophat output files have been prefixed with ${SAMPLE_NAME}_${GENOME_NAME}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	# Generate count data to be used with DESeq, edgeR or DEXeq on R
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo a counts file will be generated based on gene. This file can be used with DESeq package on R  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	samtools sort -n ${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam ${SAMPLE_NAME}_sorted
 	samtools view ${SAMPLE_NAME}_sorted.bam | python -m HTSeq.scripts.count --stranded=no -t exon -i gene_id - ~/genome_reference/annotation_tracks/GRCh37_E65_GenestocalculateRPKMs.gtf > ${SAMPLE_NAME}.counts.txt
 	rm ${SAMPLE_NAME}_sorted.bam
 	echo Counts file has been generated  | tee -a ../${SAMPLE_NAME}_RNAseq.log
 	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
 	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
    #Generate mpileup and annotate variants with Annovar
    echo Now structural variants will be detected. These will include single nucleotide variations, insertions, and deletions.  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo Samtools mpileup tool will be used to compare a consensus sequence generated from mapped reads will be compared to the human genome - hg 19  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo These variants will be filtered based on read depth and will further be annotated through Annovar  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo Annovar will run the variants through a series of filters and will result in genes with novel mutations as well as functional annotation of these variants.  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo Commands will be:  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo samtools mpileup -uf ~/genome_reference/bowtie_indexed/hg19.fa ${SAMPLE_NAME}_hg19_accepted_hits.bam | bcftools view -bvcg - > mutations/var.raw.bcf | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo bcftools view var.raw.bcf | vcfutils.pl varFilter -D100 > ${SAMPLE_NAME}.filtered.variants.vcf | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo convert2annovar.pl ${SAMPLE_NAME}.filtered.variants.vcf -format vcf4 > ${SAMPLE_NAME}.annovar.input | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo auto_annovar.pl -v --outfile ${SAMPLE_NAME}_annovar.output --buildver hg19 --ver1000g 1000g2010nov ${SAMPLE_NAME}.annovar.input /Users/zehira/local/bin/annovar/humandb/ | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo annotate_variation.pl --buildver hg19 --geneanno --dbtype ensGene ${SAMPLE_NAME}.annovar.input /Users/zehira/local/bin/annovar/humandb/ | tee -a ../${SAMPLE_NAME}_RNAseq.log
    
    mkdir mutations
	samtools mpileup -uf ~/genome_reference/bowtie_indexed/hg19.fa ${SAMPLE_NAME}_hg19_accepted_hits.bam | bcftools view -bvcg - > mutations/var.raw.bcf
	cd mutations
    bcftools view var.raw.bcf | vcfutils.pl varFilter -D100 > ${SAMPLE_NAME}.filtered.variants.vcf
    convert2annovar.pl ${SAMPLE_NAME}.filtered.variants.vcf -format vcf4 > ${SAMPLE_NAME}.annovar.input
    auto_annovar.pl -v --outfile ${SAMPLE_NAME}_annovar.output --buildver hg19 --ver1000g 1000g2010nov ${SAMPLE_NAME}.annovar.input /Users/zehira/local/bin/annovar/humandb/
    annotate_variation.pl --buildver hg19 --geneanno --dbtype ensGene ${SAMPLE_NAME}.annovar.input /Users/zehira/local/bin/annovar/humandb/
    cd ..
    
    echo variant generation and annotation is completed | tee -a ../${SAMPLE_NAME}_RNAseq.log
    date '+%m/%d/%y %H:%M:%S'  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
    
    
	# Run Cufflinks with a GTF to estimate expression. No novel transcripts will be reported.
	echo Starting the quantification with Cufflinks now  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo cufflinks --output-dir ../${SAMPLE_NAME}_cufflinks --num-threads ${CORES} --GTF ${GTF_FILE} -M ${MASK_FILE} --frag-bias-correct ${GENOME_FA} --multi-read-correct --library-type ${LIBRARY_FORMAT} -L ${SAMPLE_NAME} ${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam >>  ../${SAMPLE_NAME}_RNAseq.log
	cufflinks --output-dir ../${SAMPLE_NAME}_cufflinks --num-threads ${CORES} --GTF ${GTF_FILE} -M ${MASK_FILE} --frag-bias-correct ${GENOME_FA} --multi-read-correct --library-type ${LIBRARY_FORMAT} -L ${SAMPLE_NAME} ${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam 2>&1 | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Cufflinks have finished estimating transcript abundances  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	cd ../${SAMPLE_NAME}_cufflinks
	# Current directory cufflinks output folder
	# Rename cufflinks output files
	
	mv genes.fpkm_tracking ${SAMPLE_NAME}_${GENOME_NAME}_genes.rpkm
	mv isoforms.fpkm_tracking ${SAMPLE_NAME}_${GENOME_NAME}_transcripts.rpkm
	mv transcripts.gtf ${SAMPLE_NAME}_${GENOME_NAME}_transcripts.gtf
	
	# Generating a file with gene names and corresponding RPKM values. 
	echo Placing a file with gene names and corresponding FPKM values into the main folder now  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ${SAMPLE_NAME}_RNAseq.log
	cut -f5,10 ${SAMPLE_NAME}_${GENOME_NAME}_genes.rpkm > ../${SAMPLE_NAME}_RPKM_values.txt  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	TOTAL_GENE_NUMBER=`wc -l ${SAMPLE_NAME}_${GENOME_NAME}_genes.rpkm | awk '{print $1-1}'` 
	echo There are a total of ${TOTAL_GENE_NUMBER} genes included in the .GTF annotation file  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	#Calculating several metrics with Picard and Samtools
	echo Starting collection of several metrics with Picard and Samtools  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ../${SAMPLE_NAME}_RNAseq.log
	cd ../${SAMPLE_NAME}_tophat/
	
	#Current directory tophat output folder
	echo Running Picard - Collect RNAseq Metrics  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	java -Xmx2g -jar $HOME/local/bin/CollectRnaSeqMetrics.jar REF_FLAT=~/genome_reference/bowtie_indexed/refFlat RIBOSOMAL_INTERVALS=~/genome_reference/bowtie_indexed/hg19_ribosome_gene_locations.txt STRAND_SPECIFICITY=NONE REFERENCE_SEQUENCE=${GENOME_FA} INPUT=${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam OUTPUT=${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt CHART_OUTPUT=${SAMPLE_NAME}_Picard_RNAseq_Metrics.pdf
	
	#echo Running Picard - Mark Duplicates  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	#java -Dsnappy.disable=true -Xmx2g -jar $HOME/local/bin/MarkDuplicates.jar INPUT=${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam OUTPUT=${SAMPLE_NAME}_${GENOME_NAME}_Picard_Dups_Marked.bam METRICS_FILE=${SAMPLE_NAME}_Picard_duplicates_Metrics.txt REMOVE_DUPLICATES=FALSE ASSUME_SORTED=TRUE
	
	#echo Indexing marked .bam file  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	#samtools index ${SAMPLE_NAME}_${GENOME_NAME}_Picard_Dups_Marked.bam
	
	echo Running Samtools Flagstat  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	samtools flagstat ${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam > ${SAMPLE_NAME}_${GENOME_NAME}_Samtools_Flagstat.txt
	
	echo Running Collect alignment Summary Metrics  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	java -Xmx2g -jar $HOME/local/bin/CollectAlignmentSummaryMetrics.jar INPUT=${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam OUTPUT=${SAMPLE_NAME}_Picard_Alignment_Summary.txt VALIDATION_STRINGENCY=SILENT REFERENCE_SEQUENCE=${GENOME_FA} ASSUME_SORTED=true IS_BISULFITE_SEQUENCED=false
	
	echo Running Picard - Mean Quality by Cycle  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	java -Xmx2g -jar $HOME/local/bin/MeanQualityByCycle.jar INPUT=${SAMPLE_NAME}_${GENOME_NAME}_accepted_hits.bam OUTPUT=${SAMPLE_NAME}_Picard_MeanQuality_By_Cycle.txt CHART_OUTPUT=${SAMPLE_NAME}_Picard_MeanQuality_By_Cycle.pdf VALIDATION_STRINGENCY=SILENT 
	
	echo All the metric calculation are finished  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	date '+%m/%d/%y %H:%M:%S' | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo -------------------Analysis Results---------------------------   | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo ****Summary****  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Paired end RNAseq data for ${SAMPLE_NAME} were aligned and quantified using several tools  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo ${SAMPLE_NAME}_R1.fastq file contained ${COUNT_READ1} reads and ${SAMPLE_NAME}_R2.fastq contained ${COUNT_READ2} reads  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo The mean insert size is ${INNER_DISTANCE} with a standard deviation of ${STDEV}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	#Alignment Metrics
	UNIQUE_READS_ALIGNED_1=`cut -f3 ${SAMPLE_NAME}_Picard_Alignment_Summary.txt | head -n 8 | tail -n 1`
	UNIQUE_READS_ALIGNED_2=`cut -f3 ${SAMPLE_NAME}_Picard_Alignment_Summary.txt | head -n 9 | tail -n 1`
	TOTAL_READS_ALIGNED_1=`awk '{print $1}' ${SAMPLE_NAME}_${GENOME_NAME}_Samtools_Flagstat.txt | head -n 5 | tail -n 1`
	TOTAL_READS_ALIGNED_2=`awk '{print $1}' ${SAMPLE_NAME}_${GENOME_NAME}_Samtools_Flagstat.txt | head -n 6 | tail -n 1`
	PERCENT_READ_ALIGNED_1=`echo ${COUNT_READ1} | awk -v var2="${UNIQUE_READS_ALIGNED_1}" '{print var2/$1}'`
	PERCENT_READ_ALIGNED_2=`echo ${COUNT_READ1} | awk -v var3="${UNIQUE_READS_ALIGNED_2}" '{print var3/$1}'`
	PERCENT_READ_Q20_BASES_1=`head -n 8 ${SAMPLE_NAME}_Picard_Alignment_Summary.txt | tail -n 1 | awk '{print $11/$8}'`
	PERCENT_READ_Q20_BASES_2=`head -n 9 ${SAMPLE_NAME}_Picard_Alignment_Summary.txt | tail -n 1 | awk '{print $11/$8}'`
	PERCENT_PAIRED_READ_ALIGNMENT=`cut -f17 ${SAMPLE_NAME}_Picard_Alignment_Summary.txt | head -n 8 | tail -n 1 | awk -v var4="${COUNT_READ1}" '{print $1/var4}'`
	
	echo ****Alignment Metrics****  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Number of unique reads aligned from ${SAMPLE_NAME}_R1.fastq is ${UNIQUE_READS_ALIGNED_1}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Number of unique reads aligned from ${SAMPLE_NAME}_R2.fastq is ${UNIQUE_READS_ALIGNED_2}  | tee -a ../${SAMPLE_NAME}_RNAseq.log 
	echo Number of total reads aligned from ${SAMPLE_NAME}_R1.fastq is ${TOTAL_READS_ALIGNED_1}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Number of total reads aligned from ${SAMPLE_NAME}_R2.fastq is ${TOTAL_READS_ALIGNED_2}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percentage of reads aligned from ${SAMPLE_NAME}_R1.fastq is ${PERCENT_READ_ALIGNED_1}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percentage of reads aligned from ${SAMPLE_NAME}_R2.fastq is ${PERCENT_READ_ALIGNED_2}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percentage of aligned bases from ${SAMPLE_NAME}_R1.fastq which have a quality score above 20 is ${PERCENT_READ_Q20_BASES_1}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percentage of aligned bases from ${SAMPLE_NAME}_R2.fastq which have a quality score above 20 is ${PERCENT_READ_Q20_BASES_2}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percentage of reads aligned as pairs is ${PERCENT_PAIRED_READ_ALIGNMENT}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
# RNAseq Metrics
	PERCENT_RIBOSOME_BASES=`cut -f11 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_CODING_BASES=`cut -f12 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_UTR_BASES=`cut -f13 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_INTRONIC_BASES=`cut -f14 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_INTERGENIC_BASES=`cut -f15 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_mRNA_BASES=`cut -f16 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	MEDIAN_5PRIME_BIAS=`cut -f20 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	MEDIAN_3PRIME_BIAS=`cut -f21 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	MEDIAN_5PRIME_3PRIME_BIAS_RATIO=`cut -f22 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1` 
	PERCENT_CODING_BASES=`cut -f12 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | head -n 8 | tail -n 1`
	
	echo ****RNAseq Metrics**** | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent ribosomal bases = ${PERCENT_RIBOSOME_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent coding bases = ${PERCENT_CODING_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent UTR bases = ${PERCENT_UTR_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent intronic bases = ${PERCENT_INTRONIC_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent intergenic bases = ${PERCENT_INTERGENIC_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent mRNA bases = ${PERCENT_mRNA_BASES} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Median 5-prime coverage bias = ${MEDIAN_5PRIME_BIAS}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Median 3-prime coverage bias = ${MEDIAN_3PRIME_BIAS}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Median 5-prime to 3-prime coverage bias ratio = ${MEDIAN_5PRIME_3PRIME_BIAS_RATIO}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
#Duplication Metrics
	PERCENT_DUPLICATION=`head -n 8 ${SAMPLE_NAME}_Picard_duplicates_Metrics.txt | tail -n 1 | cut -f8`
	LIBRARY_SIZE=`head -n 8 ${SAMPLE_NAME}_Picard_duplicates_Metrics.txt | tail -n 1 | cut -f 9`
	
	echo ****Duplication Metrics**** | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Estimated fragments in the library = ${LIBRARY_SIZE} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Percent duplicate reads = ${PERCENT_DUPLICATION} | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	
#Quality Metrics (first/last cycle and mean per read)
	QUALITY_CAPTURE_LINES=`echo ${COMBINED_READ_LENGTH} | awk '{print $1+8}'`
	QUALITY_CAPTURE_READS=`echo ${COMBINED_READ_LENGTH} | awk '{print $1/2}'`
	head -n ${QUALITY_CAPTURE_LINES} ${SAMPLE_NAME}_Picard_MeanQuality_By_Cycle.txt | tail -n ${COMBINED_READ_LENGTH} > run_qualities.txt
	head -n ${QUALITY_CAPTURE_READS} run_qualities.txt > read1_qualities.txt
	tail -n ${QUALITY_CAPTURE_READS} run_qualities.txt > read2_qualities.txt
	QUALITY_READ1_FIRST_CYCLE=`cut -f2 read1_qualities.txt | head -n 1`
	QUALITY_READ1_LAST_CYCLE=`cut -f2 read1_qualities.txt | tail -n 1`
	QUALITY_READ1_AVERAGE=`awk '{s+=$2} END {print s/NR}' < read1_qualities.txt`
	QUALITY_READ2_FIRST_CYCLE=`cut -f2 read2_qualities.txt | head -n 1`
	QUALITY_READ2_LAST_CYCLE=`cut -f2 read2_qualities.txt | tail -n 1`
	QUALITY_READ2_AVERAGE=`awk '{s+=$2} END {print s/NR}' < read2_qualities.txt`
	
	echo ****Quality Metrics**** | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  The run consists of paired ${QUALITY_CAPTURE_READS}x${QUALITY_CAPTURE_READS}bp reads  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for ${SAMPLE_NAME}_R1.fastq is ${QUALITY_READ1_AVERAGE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for the first cycle of ${SAMPLE_NAME}_R1.fastq is ${QUALITY_READ1_FIRST_CYCLE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for the last cycle of ${SAMPLE_NAME}_R1.fastq is ${QUALITY_READ1_LAST_CYCLE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for ${SAMPLE_NAME}_R2.fastq is ${QUALITY_READ2_AVERAGE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for the first cycle of ${SAMPLE_NAME}_R2.fastq is ${QUALITY_READ2_FIRST_CYCLE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo Mean phred score for the last cycle of ${SAMPLE_NAME}_R2.fastq is ${QUALITY_READ2_LAST_CYCLE}  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	echo  | tee -a ../${SAMPLE_NAME}_RNAseq.log
	
	
#Create R scripts and run them to make graphs
	echo Creating R scripts and graphs for percentages of aligned reads to mRNA biotype | tee -a ../${SAMPLE_NAME}_RNAseq.log
	`head -8 ${SAMPLE_NAME}_Picard_RNAseq_Metrics.txt | tail -2 > ${SAMPLE_NAME}_RNAseq_metrics.txt` # necessary to create a file that can be fed into R
	`Rscript --slave ../../percentgraph.R ${SAMPLE_NAME}` # R script to draw aligned read %s in bar graph and pie chart formats
	
	#Create graphs with RSeQC
#Annotate junctions: i.e. known. partially novel and completely novel
	junction_annotation.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed -o ${SAMPLE_NAME} | tee -a ../${SAMPLE_NAME}_RNAseq.log 
#     # Determine junction saturation
	junction_saturation.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed -o ${SAMPLE_NAME}_junctionSaturation
#     # Read distribution
	read_distribution.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed 
#     # Read Quality
	read_quality.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed -o ${SAMPLE_NAME}
#     # Gene body coverage
	geneBody_coverage.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed -o ${SAMPLE_NAME}
# # Insert Size distribution
		inner_distance.py -i ${SAMPLE_NAME}_hg19_accepted_hits.bam -r ~/genome_reference/annotation_tracks/hg19_GRCh37_Feb20009_RefSeq.bed -o ${SAMPLE_NAME}

 	
# chimeric transcript detection using EricScript
	cd ..
	#current directory ${SAMPLE_NAME}
	/Users/zehira/local/bin/ericscript.pl --samplename ${SAMPLE_NAME} -o ${SAMPLE_NAME}_chimerics --remove -p 24 ${SAMPLE_NAME}_R1.fastq ${SAMPLE_NAME}_R2.fastq 2>&1| tee -a ${SAMPLE_NAME}_RNAseq.log	
	
	
	END_TIME=`date '+%s'`
	ELAPSED_TIME=$((END_TIME-START_TIME))
	ds=$((ELAPSED_TIME % 60))
	dm=$(((ELAPSED_TIME / 60) % 60))
	dh=$((ELAPSED_TIME / 3600))
	TOTAL_TIME=`printf '%d:%02d:%02d' $dh $dm $ds`
	echo The analysis is now complete and took ${TOTAL_TIME} hours  | tee -a ${SAMPLE_NAME}_RNAseq.log
	
	mkdir /Volumes/TimeMachine/SarcomaPatientAnalyzedFastqFiles/
	mv *.fastq /Volumes/TimeMachine/SarcomaPatientAnalyzedFastqFiles/
	cd ..
	#Current directort is where the samples are
done
`echo "The analysis of ${SAMPLE_NAME} RNAseq data has been completed" | mail -s "RNAseqAnalysis has been completed" "ahmetzehir@gmail.com"`

















































